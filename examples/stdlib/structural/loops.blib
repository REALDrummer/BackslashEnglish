define @ \: <op Ops>*;?: run Ops.

define <number> while <op=>bit Condition> <op Op>:
	int i := 0
	asm while_start:
	asm cmp (Condition), 0
	asm jeq while_end
	run Op using Condition
	i++
	asm jmp while_start
	asm while_end:
	i.
	
define number for <variable i> while <op=>bit Condition> with <op Incrementer> <op Op>:
	while (run Condition using i):
		run Ops using i
		run Incrementer using i.


# TODO: find a way to consolidate the two operator definitions below: a type declaration and a constructor for said new type
define private <type> <int Number of Items>-item each-structure:
	a new type with 
		final string Var Name and
		final Number of Items thing list List;

define <@-item each-structure> each (.+) in <@ thing list List>:
	each-structure Each := a new each-structure
	
	Each's Var Name := \1
	Each's list := List
	
	Each;

define <@rs> <op()=>@r Op> for <@n-item each-structures Eaches>:
	@rs Results := a new array of @n @rs
	
	# define i ahead of time to use it in the For Vars below
	int i
	
	# define the operators for each for variable
	vars For Vars := a new array of (Eaches's size) vars
	from f := 0 to For Vars's size,
		For Vars[f] := define <var> `Eaches[f]'s var name`: Eaches[f]'s list[i];
	
	from i := 0 to Results's size:
		Results[i] := run Op using For Vars;
	
	Results;

define number from <variable i> to <number End> <op Op>:
	if i = End,
		run Op using i
	else if i < End,
		for i while i < End with i++,
			run Op using i
	else
		for i while i > End with i--,
			run Op using i;

define number from <number Start> to <number End>\: <op Ops>*;?:
	from number i := Start to End:
		run Ops using i;
