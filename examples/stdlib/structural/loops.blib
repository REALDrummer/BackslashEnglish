define <number> while <op=>bit Condition> <op Op>:
	int i := 0
	asm while_start:
	asm cmp (Condition), 0
	asm jeq while_end
	run Op using Condition
	i++
	asm jmp while_start
	asm while_end:
	i


# TODO: find a way to consolidate the two operator definitions below: a type declaration and a constructor for said new type
define private <type> (<int Number of Items>-item)? each-structure:
	a new type with 
		final string Var Name and
		final Number of Items thing list List

define <(List's size)-item each-structure> each "Var Name"(.+) in <list List>:
	each-structure Each := a new each-structure
	
	Each's var name := Var Name
	Each's list := List
	
	Each

define <Eaches's list's type> for <each-structures Eaches>, <code block Body>:
	(Eaches's list's type) Results := a new array of (Eaches's list's type)
	
	# define i ahead of time to use it in the For Vars below
	int i
	
	# define the operators for each for variable
	vars For Vars := a new array of (Eaches's size) vars
	from f := 0 to For Vars's size,	# don't use the for-each here or there will be an infinite recursion!
		For Vars[f] := define <var> `Eaches[f]'s var name`: Eaches[f]'s list[i]
	
	from i := 0 to Results's size:	# don't use the for-each here or there will be an infinite recursion!
		Results[i] := run Body using For Vars
	
	Results

define <number> from <variable i> to <number End>, <code block Body>:
	if i = End,
		run Body using i
	else if i < End,
		for i while i < End with i++,
			run Body using i
	else
		for i while i > End with i--,
			run Body using i
