#< system operators >#
#< type type\(<<type Types ?? [thing]>{1,", "}>)? | returns a type that matches a type derived from all the Types >#
	
#< (type of Type) a? new type ((created|derived|extended? from)|extends|(based on) <types Types>)? | creates a new type that inherits from Type (or thing if Types isn't given) >#
	
#< bit <type Left> matches|fits|<= <type Right> | determines whether or not Left is equal to or derived from Right >#
	
#< overridden bit <type Left> = <type Right> | determines whether or not the two types are the same type >#
	
#< implicit type <tuple of variables and templates Tuple> >> <"type"> | converts a tuple of variables and templates to a new type (because in \English, types are treated like tuples of variables and templates). >#
	
define type<Type> type of <type Type>:
	type of Type.

define (type of Type) <type Type>\+\+:
	a new type derived from Type.
	
define (type of Left Type and Right Type) <type Left Type> \+ <type Right Type>:
	a new type derived from Left Type and Right Type.
	
define bit <type Left> >|(is a? parent|kind|\type of?) <type Right>: 
	Right <= Left.
	
