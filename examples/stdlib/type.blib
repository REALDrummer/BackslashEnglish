#< system operators >#
#< type type\(<<type Types ?? [thing]>{1,", "}>)? | returns a type that matches a type derived from all the Types >#
	
#< (type of Type) a? new type ((created|derived|extended? from)|extends|(based on) <types Types>)? | creates a new type that inherits from Type (or thing if Types isn't given) >#
	
#< bit <type Left> matches|fits|<= <type Right> | determines whether or not Left is equal to or derived from Right >#
	
#< overridden bit <type Left> = <type Right> | determines whether or not the two types are the same type >#
	
#< implicit type <tuple of variables and templates Tuple> >> <"type"> | converts a tuple of variables and templates to a new type (because in \English, types are treated like tuples of variables and templates). >#

define <type of Left Type and Right Type> <type Left Type> \+ <type Right Type>:
	a new type of from Left Type and Right Type
	
define bit <type Left> >|(is a? parent|kind|\type of?) <type Right>: 
	Right <= Left



#< implications >#
define <type of op> (<type Premise> is a(n)? <type Result>)? implication:
	if Premise is not given,
		Premise and Result := thing
	a new type of op with Premise and Result

define <implication> implies <var Premise> is a(n)? <type Result> <op=>bit Implier>:
	a new op=>bit with Implier, Premise, and Result

define <bit> run <implication Implication> <code block remainder Rest>:
	bit Result := run Implication's implier
	if Result,
		run Rest using 
			(a new (Implication's result) variable named Implication's premise's name := Implication's premise)
	else
		run Rest
