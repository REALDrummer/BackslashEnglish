define <type> <type Type>? var(iable)?:
	if Type is not given,
		Type := thing
	# TODO: is there a recursion problem with this and how can it be fixed?
	a new type of op()=>Type with
		Type* address := malloc Type's memsize and
		final string Name

define <Type? variable> a new <type Type>? var(iable)? named <final string Name>:
	a new variable 
		with Name
		where 8 bytes Address := &(a new empty variable error saying "The variable '`Type` `Name`' was used, but never assigned a value!")

define <Type? variable> <type Type> "Name"(\w|\s)+:
	a new Type var named Name

define priority-224 <(Value's type) variables> <(Value's type) variables Vars> \:= <thing Value>:
	# assign the single given value to all the given variables
	for each Var in Vars,
		Var := Value

define priority-224 <(Values's size) (Value's element type) variables> <(Values's size) (Value's element type) variables Vars> \:= <list Values>:
	for any Var in Vars,
		if Var is final
			throw a \final modification error saying "Final variables like `Var` can't be reassigned!"
	
	from i := 0 to Value's size,
		Values[i] := Vars[i]
	
	Vars

define <type of collection> <list Var Names>:
	for each Name in Var Names,
		a new variable named Name
